// <auto-generated />
using System;
using BaseService.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BaseService.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAOLibrary.Organization.OrganizationDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EmployeesWithPasses")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            EmployeesWithPasses = 0,
                            IsApproved = true,
                            OrganizationName = "Test Organization",
                            OrganizationType = "Health"
                        });
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GeneratedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReoccurring")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassDataMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PassDaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PassDaoId");

                    b.ToTable("PassDataMaps");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassLogDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<string>("LogTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScannerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PassId");

                    b.HasIndex("ScannerId");

                    b.HasIndex("UserId");

                    b.ToTable("PassLogs");
                });

            modelBuilder.Entity("DAOLibrary.Pass.UserPassDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PassId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserPassDao");
                });

            modelBuilder.Entity("DAOLibrary.User.UserDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsVertified")
                        .HasColumnType("boolean");

                    b.Property<string>("Iv")
                        .HasColumnType("text");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationDaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("OrganizationDaoId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            FullName = "Admin",
                            IsVertified = true,
                            Iv = "Qn0j+NTJFfCQ2Hw6WdjXqA==",
                            Key = "S6yeuQw4VMYmzvTapS/Jph3oUct88Iqq0XprXWxfMpQ=",
                            NationalId = "982351123V",
                            Password = "KcsI7gpDcpIWTwuCQUIvDA==",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            FullName = "User",
                            IsVertified = true,
                            Iv = "Qn0j+NTJFfCQ2Hw6WdjXqA==",
                            Key = "S6yeuQw4VMYmzvTapS/Jph3oUct88Iqq0XprXWxfMpQ=",
                            NationalId = "988888888",
                            Password = "KcsI7gpDcpIWTwuCQUIvDA==",
                            UserType = "User"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            FullName = "Scanner",
                            IsVertified = true,
                            Iv = "Qn0j+NTJFfCQ2Hw6WdjXqA==",
                            Key = "S6yeuQw4VMYmzvTapS/Jph3oUct88Iqq0XprXWxfMpQ=",
                            NationalId = "988888188",
                            Password = "KcsI7gpDcpIWTwuCQUIvDA==",
                            UserType = "Scanner"
                        });
                });

            modelBuilder.Entity("DAOLibrary.VaccinationData.VaccinationDataDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("VaccineDoseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VaccineType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("vaccinatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("vaccinatedPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VaccinationDatas");
                });

            modelBuilder.Entity("DAOLibrary.VacinationData.VaccinationUserDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VaccinationDataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccinationDataId")
                        .IsUnique();

                    b.ToTable("VaccinationUsers");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassDao", b =>
                {
                    b.HasOne("DAOLibrary.User.UserDao", "User")
                        .WithMany("EmployeeList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassDataMap", b =>
                {
                    b.HasOne("DAOLibrary.Pass.PassDao", "PassDao")
                        .WithMany("Data")
                        .HasForeignKey("PassDaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassDao");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassLogDao", b =>
                {
                    b.HasOne("DAOLibrary.Pass.PassDao", "Pass")
                        .WithMany("PassLogs")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAOLibrary.User.UserDao", "Scanner")
                        .WithMany()
                        .HasForeignKey("ScannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAOLibrary.User.UserDao", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pass");

                    b.Navigation("Scanner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAOLibrary.Pass.UserPassDao", b =>
                {
                    b.HasOne("DAOLibrary.Pass.PassDao", "Pass")
                        .WithOne("UserPassDao")
                        .HasForeignKey("DAOLibrary.Pass.UserPassDao", "PassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAOLibrary.User.UserDao", "User")
                        .WithMany("Passes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAOLibrary.User.UserDao", b =>
                {
                    b.HasOne("DAOLibrary.Organization.OrganizationDao", "Organization")
                        .WithMany("EmployeeList")
                        .HasForeignKey("OrganizationDaoId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DAOLibrary.VacinationData.VaccinationUserDao", b =>
                {
                    b.HasOne("DAOLibrary.User.UserDao", "User")
                        .WithMany("VaccinationUserDao")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAOLibrary.VaccinationData.VaccinationDataDao", "VaccinationData")
                        .WithOne("VaccinationUserDao")
                        .HasForeignKey("DAOLibrary.VacinationData.VaccinationUserDao", "VaccinationDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VaccinationData");
                });

            modelBuilder.Entity("DAOLibrary.Organization.OrganizationDao", b =>
                {
                    b.Navigation("EmployeeList");
                });

            modelBuilder.Entity("DAOLibrary.Pass.PassDao", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("PassLogs");

                    b.Navigation("UserPassDao");
                });

            modelBuilder.Entity("DAOLibrary.User.UserDao", b =>
                {
                    b.Navigation("EmployeeList");

                    b.Navigation("Passes");

                    b.Navigation("VaccinationUserDao");
                });

            modelBuilder.Entity("DAOLibrary.VaccinationData.VaccinationDataDao", b =>
                {
                    b.Navigation("VaccinationUserDao")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
